AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Discord Bot and Torn Company Cron Jobs (Serverless Stack)

Globals:
  Function:
    Timeout: 10
    Runtime: python3.12
    Architectures:
      - x86_64

Resources:
  # --- Frontend Lambda for Discord interactions ---
  DiscordBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/discord_bot/
      Handler: app.lambda_handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - secretsmanager:GetSecretValue
                - sqs:SendMessage
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !GetAtt SlashCommandQueue.Arn
      Environment:
        Variables:
          SLASH_COMMAND_QUEUE_URL: !Ref SlashCommandQueue
      Events:
        DiscordInteractions:
          Type: Api
          Properties:
            Path: /interactions
            Method: post

  # --- Generic SQS Queue for background processing ---
  SlashCommandQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: slash-command-queue

  # --- Worker Lambda triggered by SQS (routes commands) ---
  SlashCommandWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/discord_bot/
      Handler: slash_command_worker.lambda_handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*

            - Effect: "Allow"
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:CreateSecret
                - secretsmanager:UpdateSecret
                - secretsmanager:ReplicateSecretToRegions
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        SlashCommandQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SlashCommandQueue.Arn
            BatchSize: 1

  # --- CRON jobs for populating the DB ---
  PopulateDirectorEducationCron:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cron/
      Handler: populate_director_education.lambda_handler
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 17 * * ? *)
            Name: DailyDirectorEducationJob
            Description: Runs PopulateDirectorEducationCron once daily at 17:00 UTC
            Enabled: true

  PopulateDirectorStockBlocksCron:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cron/
      Handler: populate_director_stock_blocks.lambda_handler
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 17 * * ? *)
            Name: DailyDirectorStockBlocksJob
            Description: Runs PopulateDirectorStockBlocksCron once daily at 17:00 UTC
            Enabled: true

  PopulateEmployeesCron:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cron/
      Handler: populate_employees.lambda_handler
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 17 * * ? *)
            Name: DailyEmployeesJob
            Description: Runs PopulateEmployeesCron once daily at 17:00 UTC
            Enabled: true

  DailyReportEmployeesCron:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cron/
      Handler: daily_report_employees.lambda_handler
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 17 * * ? *)
            Name: DailyReportEmployeesJob
            Description: Runs DailyReportEmployeesCron once daily at 17:00 UTC
            Enabled: true

  DailyReportStockCron:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cron/
      Handler: daily_report_stock.lambda_handler
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 17 * * ? *)
            Name: DailyReportStockJob
            Description: Runs DailyReportStockCron once daily at 17:00 UTC
            Enabled: true

  DailyCompanyStockCron:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cron/
      Handler: populate_company_stock.lambda_handler
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 17 * * ? *)
            Name: DailyCompanyStockJob
            Description: Runs DailyCompanyStockCron once daily at 17:00 UTC
            Enabled: true

Outputs:
  DiscordApi:
    Description: API Gateway endpoint URL for Discord interactions
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/interactions

  DiscordBotFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt DiscordBotFunction.Arn

  DiscordBotFunctionRole:
    Description: IAM Role for Lambda function
    Value: !GetAtt DiscordBotFunctionRole.Arn

  SlashCommandQueueUrl:
    Description: URL of the SQS queue for slash command processing
    Value: !Ref SlashCommandQueue

  SlashCommandQueueArn:
    Description: ARN of the SQS queue for slash command processing
    Value: !GetAtt SlashCommandQueue.Arn

  PopulateDirectorEducationCronArn:
    Description: Lambda function ARN for daily director education cron job
    Value: !GetAtt PopulateDirectorEducationCron.Arn

  PopulateDirectorStockBlocksCronArn:
    Description: Lambda function ARN for daily director stock blocks cron job
    Value: !GetAtt PopulateDirectorStockBlocksCron.Arn

  PopulateEmployeesCronArn:
    Description: Lambda function ARN for daily employees cron job
    Value: !GetAtt PopulateEmployeesCron.Arn

  DailyReportEmployeesCronArn:
    Description: Lambda function ARN for daily report cron job
    Value: !GetAtt DailyReportEmployeesCron.Arn

  DailyReportStockCronArn:
    Description: Lambda function ARN for daily stock cron job
    Value: !GetAtt DailyReportStockCron.Arn

  DailyCompanyStockCronArn:
    Description: Lambda function ARN for daily company stock cron job
    Value: !GetAtt DailyCompanyStockCron.Arn
