AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Discord Bot Lambda (Serverless)

Globals:
  Function:
    Timeout: 10
    Runtime: python3.12
    Architectures:
      - x86_64

Resources:
  # --- Frontend Lambda for Discord interactions ---
  DiscordBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/discord_bot/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "secretsmanager:GetSecretValue"
                - "sqs:SendMessage"
              Resource: 
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:discord_keys-*"
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:supabase_keys-*"
                - !GetAtt RegisterQueue.Arn
      Environment:
        Variables:
          REGISTER_QUEUE_URL: !Ref RegisterQueue
      Events:
        DiscordInteractions:
          Type: Api
          Properties:
            Path: /interactions
            Method: post

  # --- SQS Queue for background processing ---
  RegisterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: register-queue

  # --- Worker Lambda triggered by SQS (slash register) ---
  RegisterWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/discord_bot/
      Handler: register_worker.lambda_handler
      Runtime: python3.12
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "secretsmanager:GetSecretValue"
              Resource:
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:discord_keys-*"
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:supabase_keys-*"
            
            - Effect: "Allow"
              Action:
                - "secretsmanager:GetSecretValue"
                - "secretsmanager:CreateSecret"
                - "secretsmanager:UpdateSecret"
                - "secretsmanager:ReplicateSecretToRegions"
              Resource:
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:torn_director_api_keys-*"
      Events:
        RegisterQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RegisterQueue.Arn
            BatchSize: 1

  # --- CRON jobs for populating the DB ---
  PopulateDirectorEducationCron:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cron/
      Handler: populate_director_education.lambda_handler
      Runtime: python3.12
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "secretsmanager:GetSecretValue"
              Resource:
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:discord_keys-*"
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:supabase_keys-*"
                - !Sub "arn:aws:secretsmanager:ap-southeast-1:${AWS::AccountId}:secret:torn_director_api_keys*"
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 3 * * ? *)
            Name: DailyDirectorEducationJob
            Description: "Runs PopulateDirectorEducationCron once daily at 17:00 UTC"
            Enabled: true


# Parameters:
#   DiscordPublicKey:
#     Type: String
#     Description: "Discord Application Public Key (can also come from Secrets Manager)"

Outputs:
  DiscordApi:
    Description: "API Gateway endpoint URL for Prod stage for Discord interactions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/interactions"
    
  DiscordBotFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt DiscordBotFunction.Arn

  DiscordBotFunctionIamRole:
    Description: "IAM Role for Lambda function"
    Value: !GetAtt DiscordBotFunctionRole.Arn

  RegisterQueueUrl:
    Description: "URL of the SQS queue for registration processing"
    Value: !Ref RegisterQueue

  RegisterQueueArn:
    Description: "ARN of the SQS queue for registration processing"
    Value: !GetAtt RegisterQueue.Arn

  PopulateDirectorEducationCronFunction:
    Description: "Lambda function ARN for daily director education cron job"
    Value: !GetAtt PopulateDirectorEducationCron.Arn

  PopulateDirectorEducationCronFunctionName:
    Description: "Lambda function name"
    Value: !Ref PopulateDirectorEducationCron
