AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Discord Bot and Torn Company Cron Jobs (Serverless Stack)

Globals:
  Function:
    Timeout: 10
    Runtime: python3.12
    Architectures:
      - x86_64

Resources:

  # --- Shared IAM Role for all cron Lambdas ---
  CronSecretsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CronSecretsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:google_service_account-*


  # --- Frontend Lambda for Discord interactions ---
  DiscordBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/discord_bot/
      Handler: app.lambda_handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - secretsmanager:GetSecretValue
                - sqs:SendMessage
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*
                - !GetAtt SlashCommandQueue.Arn
      Environment:
        Variables:
          SLASH_COMMAND_QUEUE_URL: !Ref SlashCommandQueue
      Events:
        DiscordInteractions:
          Type: Api
          Properties:
            Path: /interactions
            Method: post

  # --- Generic SQS Queue for background processing ---
  SlashCommandQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: slash-command-queue

  # --- Worker Lambda triggered by SQS (routes commands) ---
  SlashCommandWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/discord_bot/
      Handler: slash_command_worker.lambda_handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:discord_keys-*
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:supabase_keys-*

            - Effect: "Allow"
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:CreateSecret
                - secretsmanager:UpdateSecret
                - secretsmanager:ReplicateSecretToRegions
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:torn_director_api_keys-*
      Events:
        SlashCommandQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SlashCommandQueue.Arn
            BatchSize: 1

# --- CRON jobs for populating the DB ---

  # --- Non-critical Cron Jobs (can run earlier) ---
  PopulateDirectorEducationCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/
      Handler: populate_director_education.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 16 * * ? *)
            Name: DirectorEducationJob
            Description: Runs non-critical education updates at 16:30 UTC
            Enabled: true

  PopulateDirectorStockBlocksCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/
      Handler: populate_director_stock_blocks.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 16 * * ? *)
            Name: DirectorStockBlocksJob
            Description: Runs non-critical stock block updates at 16:45 UTC
            Enabled: true

  # --- Critical Post-Rollover Cron Jobs (from 18:00 UTC) ---
  PopulateCompanyCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/
      Handler: populate_company.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 18 * * ? *)
            Name: PopulateCompanyJob
            Description: Runs post-rollover company snapshot at 18:30 UTC
            Enabled: true

  PopulateCompanyStockCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/
      Handler: populate_company_stock.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 18 * * ? *)
            Name: PopulateCompanyStockJob
            Description: Post-rollover stock snapshot at 18:30 UTC
            Enabled: true

  PopulateCompanyFinancialsCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/
      Handler: populate_company_financials.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 18 * * ? *)
            Name: PopulateCompanyFinancialsJob
            Description: Post-rollover company financials snapshot at 18:30 UTC
            Enabled: true

  DailyReportStockCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/discord_reports/
      Handler: daily_report_stock.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(45 18 * * ? *)
            Name: DailyReportStockJob
            Description: Pre-rollover stock report at 18:45 UTC
            Enabled: true

  # --- Employee-related Cron Jobs (18:30 UTC) ---
  PopulateEmployeesCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/
      Handler: populate_employees.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 18 * * ? *)
            Name: PopulateEmployeesJob
            Description: Employee stats snapshot at 18:30 UTC
            Enabled: true

  DailyReportEmployeesCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/discord_reports/
      Handler: daily_report_employees.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 19 * * ? *)
            Name: DailyReportEmployeesJob
            Description: Employee report at 17:15 UTC
            Enabled: true

  WeeklyCompanyInfoPostUpdaterCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/
      Handler: weekly_company_info_post_updater.lambda_handler
      Timeout: 30
      Events:
        WeeklySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(00 20 ? * SUN *)
            Name: WeeklyCompanyInfoPostJob
            Description: Update the info post Every Sunday at 20:00 UTC
            Enabled: true

# V2 using Google Sheets
  WeeklyReportDirectorsEducationGSCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/v2/
      Handler: weekly_report_directors_education_gSheets.lambda_handler
      Timeout: 30
      Events:
        WeeklySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(00 20 ? * SUN *)
            Name: WeeklyReportDirectorsEducationGSJob
            Description: Directors Completed Education Every Sunday at 20:00 UTC
            Enabled: true

  DailyReportAllEmployeesGSCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/v2/
      Handler: daily_report_all_employees_gSheets.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(00 19 * * ? *)
            Name: DailyReportAllEmployeesGSJob
            Description: All Employees stats Every Day at 19:00 UTC
            Enabled: true

  DailyReportComapanyFinancialsGSCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/v2/
      Handler: daily_report_company_financials_gSheets.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(45 18 * * ? *)
            Name: DailyReportComapanyFinancialsGSJob
            Description: Company Financials stats Every Day at 18:45 UTC
            Enabled: true

  DailyReportInvestmentsGSCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/v2/
      Handler: daily_report_investments_gSheets.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(00 20 * * ? *)
            Name: DailyReportInvestmentsGSJob
            Description: Company Investments/Returns stats Every Day at 20:00 UTC
            Enabled: true

  WeeklyReportCompanyFinancialsGSCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/v2/
      Handler: weekly_report_company_financials_gSheets.lambda_handler
      Timeout: 30
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(45 18 ? * SUN *)
            Name: WeeklyReportComapanyFinancialsGSJob
            Description: Company Financials stats Every Sinday at 18:45 UTC
            Enabled: true

  WeeklyReportDirectorsStocksGSCron:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CronSecretsRole.Arn
      CodeUri: src/cron/v2/
      Handler: weekly_report_directors_stocks_gsheets.lambda_handler
      Timeout: 30
      Events:
        WeeklySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(00 20 ? * SUN *)
            Name: WeeklyReportDirectorsStocksGSJob
            Description: Directors Stock holdings for company related bonuses Every Sunday at 20:00 UTC
            Enabled: true


Outputs:

  CronSecretsRoleArn:
    Description: ARN of the shared IAM role for all cron Lambda functions
    Value: !GetAtt CronSecretsRole.Arn

  DiscordApi:
    Description: API Gateway endpoint URL for Discord interactions
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/interactions

  DiscordBotFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt DiscordBotFunction.Arn

  DiscordBotFunctionRole:
    Description: IAM Role for Lambda function
    Value: !GetAtt DiscordBotFunctionRole.Arn

  SlashCommandQueueUrl:
    Description: URL of the SQS queue for slash command processing
    Value: !Ref SlashCommandQueue

  SlashCommandQueueArn:
    Description: ARN of the SQS queue for slash command processing
    Value: !GetAtt SlashCommandQueue.Arn

  PopulateDirectorEducationCronArn:
    Description: Lambda function ARN for daily director education cron job
    Value: !GetAtt PopulateDirectorEducationCron.Arn

  PopulateDirectorStockBlocksCronArn:
    Description: Lambda function ARN for daily director stock blocks cron job
    Value: !GetAtt PopulateDirectorStockBlocksCron.Arn

  PopulateEmployeesCronArn:
    Description: Lambda function ARN for populate employees cron job
    Value: !GetAtt PopulateEmployeesCron.Arn

  PopulateCompanyCronArn:
    Description: Lambda function ARN for populate company cron job
    Value: !GetAtt PopulateCompanyCron.Arn

  PopulateCompanyStockCronArn:
    Description: Lambda function ARN for populating daily company stock cron job
    Value: !GetAtt PopulateCompanyStockCron.Arn

  PopulateCompanyFinancialsCronArn:
    Description: Lambda function ARN for populating daily company financials cron job
    Value: !GetAtt PopulateCompanyFinancialsCron.Arn
